Submitted By:            Armin K. <krejzi at email dot com>
Date:                    2014-08-02
Initial Package Version: 0.24.0
Upstream Status:         Fixed
Origin:                  Upstream
Description:             Late post release fixes to fix some issues with packages that use Vala
                         gtk+-3.0: Update to 3.12.0
                         geocode-glib-1.0: Update to 3.12.0
                         clutter-1.0: Update to 1.18.0
                         atk: Update and fix metadata

--- a/vapi/atk.vapi	2013-12-22 19:40:23.000000000 +0100
+++ b/vapi/atk.vapi	2014-08-02 13:39:10.557150066 +0200
@@ -41,12 +41,15 @@
 	public class Misc : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Misc ();
+		[Deprecated]
 		public static unowned Atk.Misc get_instance ();
+		[Deprecated]
 		public virtual void threads_enter ();
+		[Deprecated]
 		public virtual void threads_leave ();
 	}
 	[CCode (cheader_filename = "atk/atk.h", type_id = "atk_no_op_object_get_type ()")]
-	public class NoOpObject : Atk.Object, Atk.Action, Atk.Component, Atk.Document, Atk.EditableText, Atk.Hypertext, Atk.Image, Atk.Selection, Atk.Table, Atk.Text, Atk.Value, Atk.Window {
+	public class NoOpObject : Atk.Object, Atk.Action, Atk.Component, Atk.Document, Atk.EditableText, Atk.Hypertext, Atk.Image, Atk.Selection, Atk.Table, Atk.TableCell, Atk.Text, Atk.Value, Atk.Window {
 		[CCode (has_construct_function = false, type = "AtkObject*")]
 		public NoOpObject (GLib.Object obj);
 	}
@@ -65,6 +68,7 @@
 		[CCode (has_construct_function = false)]
 		protected Object ();
 		public bool add_relationship (Atk.RelationType relationship, Atk.Object target);
+		[Deprecated]
 		public virtual uint connect_property_change_handler (Atk.PropertyChangeHandler handler);
 		public virtual Atk.AttributeSet get_attributes ();
 		public virtual unowned string get_description ();
@@ -82,9 +86,11 @@
 		public virtual Atk.Role get_role ();
 		public virtual void initialize (void* data);
 		public void notify_state_change (Atk.State state, bool value);
+		public unowned Atk.Object peek_parent ();
 		public Atk.Object ref_accessible_child (int i);
 		public virtual Atk.RelationSet ref_relation_set ();
 		public virtual Atk.StateSet ref_state_set ();
+		[Deprecated]
 		public virtual void remove_property_change_handler (uint handler_id);
 		public bool remove_relationship (Atk.RelationType relationship, Atk.Object target);
 		public virtual void set_description (string description);
@@ -105,27 +111,33 @@
 		public Atk.Object accessible_parent { owned get; set; }
 		[NoAccessorMethod]
 		public int accessible_role { get; set; }
+		[Deprecated]
 		[NoAccessorMethod]
 		public string accessible_table_caption { owned get; set; }
 		[NoAccessorMethod]
 		public Atk.Object accessible_table_caption_object { owned get; set; }
+		[Deprecated]
 		[NoAccessorMethod]
 		public string accessible_table_column_description { owned get; set; }
+		[Deprecated]
 		[NoAccessorMethod]
 		public Atk.Object accessible_table_column_header { owned get; set; }
+		[Deprecated]
 		[NoAccessorMethod]
 		public string accessible_table_row_description { owned get; set; }
+		[Deprecated]
 		[NoAccessorMethod]
 		public Atk.Object accessible_table_row_header { owned get; set; }
 		[NoAccessorMethod]
 		public Atk.Object accessible_table_summary { owned get; set; }
+		[Deprecated]
 		[NoAccessorMethod]
 		public double accessible_value { get; set; }
 		public virtual signal void active_descendant_changed (void* child);
 		public virtual signal void children_changed (uint change_index, void* changed_child);
 		[Deprecated]
 		public virtual signal void focus_event (bool focus_in);
-		public signal void property_change (void* arg1);
+		public virtual signal void property_change (void* values);
 		public virtual signal void state_change (string name, bool state_set);
 		public virtual signal void visible_data_changed ();
 	}
@@ -145,6 +157,17 @@
 		[NoWrapper]
 		public virtual string get_object_id ();
 	}
+	[CCode (cheader_filename = "atk/atk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "atk_range_get_type ()")]
+	[Compact]
+	public class Range {
+		[CCode (has_construct_function = false)]
+		public Range (double lower_limit, double upper_limit, string description);
+		public Atk.Range copy ();
+		public void free ();
+		public unowned string get_description ();
+		public double get_lower_limit ();
+		public double get_upper_limit ();
+	}
 	[CCode (cheader_filename = "atk/atk.h")]
 	public class Registry : GLib.Object {
 		[Deprecated]
@@ -280,7 +303,9 @@
 		public abstract void get_extents (int x, int y, int width, int height, Atk.CoordType coord_type);
 		public abstract Atk.Layer get_layer ();
 		public abstract int get_mdi_zorder ();
+		[Deprecated]
 		public abstract void get_position (int x, int y, Atk.CoordType coord_type);
+		[Deprecated]
 		public abstract void get_size (int width, int height);
 		public abstract bool grab_focus ();
 		public abstract Atk.Object ref_accessible_at_point (int x, int y, Atk.CoordType coord_type);
@@ -371,13 +396,16 @@
 		public abstract bool add_column_selection (int column);
 		public abstract bool add_row_selection (int row);
 		public abstract unowned Atk.Object get_caption ();
+		[Deprecated]
 		public abstract int get_column_at_index (int index_);
 		public abstract unowned string get_column_description (int column);
 		public abstract int get_column_extent_at (int row, int column);
 		public abstract unowned Atk.Object get_column_header (int column);
+		[Deprecated]
 		public abstract int get_index_at (int row, int column);
 		public abstract int get_n_columns ();
 		public abstract int get_n_rows ();
+		[Deprecated]
 		public abstract int get_row_at_index (int index_);
 		public abstract unowned string get_row_description (int row);
 		public abstract int get_row_extent_at (int row, int column);
@@ -405,6 +433,16 @@
 		public virtual signal void row_inserted (int row, int num_inserted);
 		public virtual signal void row_reordered ();
 	}
+	[CCode (cheader_filename = "atk/atk.h", type_id = "atk_table_cell_get_type ()")]
+	public interface TableCell : Atk.Object {
+		public abstract GLib.GenericArray<Atk.Object> get_column_header_cells ();
+		public abstract int get_column_span ();
+		public abstract bool get_position (out int row, out int column);
+		public abstract bool get_row_column_span (out int row, out int column, out int row_span, out int column_span);
+		public abstract GLib.GenericArray<Atk.Object> get_row_header_cells ();
+		public abstract int get_row_span ();
+		public abstract Atk.Object get_table ();
+	}
 	[CCode (cheader_filename = "atk/atk.h")]
 	public interface Text : GLib.Object {
 		public abstract bool add_selection (int start_offset, int end_offset);
@@ -418,6 +456,7 @@
 		public static Atk.TextAttribute attribute_register (string name);
 		public static void free_ranges ([CCode (array_length = false)] Atk.TextRange[] ranges);
 		[CCode (array_length = false, array_null_terminated = true)]
+		[NoWrapper]
 		public virtual Atk.TextRange[] get_bounded_ranges (Atk.TextRectangle rect, Atk.CoordType coord_type, Atk.TextClipType x_clip_type, Atk.TextClipType y_clip_type);
 		public abstract int get_caret_offset ();
 		public abstract unichar get_character_at_offset (int offset);
@@ -450,11 +489,22 @@
 	}
 	[CCode (cheader_filename = "atk/atk.h", type_id = "atk_value_get_type ()")]
 	public interface Value : GLib.Object {
+		[Deprecated]
 		public abstract void get_current_value (GLib.Value value);
+		public abstract double get_increment ();
+		[Deprecated]
 		public abstract void get_maximum_value (GLib.Value value);
+		[Deprecated]
 		public abstract void get_minimum_increment (GLib.Value value);
+		[Deprecated]
 		public abstract void get_minimum_value (GLib.Value value);
+		public abstract Atk.Range get_range ();
+		public abstract GLib.SList<Atk.Range> get_sub_ranges ();
+		public abstract void get_value_and_text (out double value, out string text);
+		[Deprecated]
 		public abstract bool set_current_value (GLib.Value value);
+		public abstract void set_value (double new_value);
+		public signal void value_changed (double value, string text);
 	}
 	[CCode (cheader_filename = "atk/atk.h", type_id = "atk_window_get_type ()")]
 	public interface Window : Atk.Object {
@@ -484,8 +534,7 @@
 		public uint16 keycode;
 		public uint32 timestamp;
 	}
-	[CCode (cheader_filename = "atk/atk.h", cname = "_AtkPropertyValues", has_type_id = false)]
-	[GIR (name = "_PropertyValues")]
+	[CCode (cheader_filename = "atk/atk.h", has_type_id = false)]
 	public struct PropertyValues {
 		public weak string property_name;
 		public GLib.Value old_value;
@@ -688,6 +737,9 @@
 		MATH,
 		RATING,
 		TIMER,
+		DESCRIPTION_LIST,
+		DESCRIPTION_TERM,
+		DESCRIPTION_VALUE,
 		LAST_DEFINED;
 		[CCode (cheader_filename = "atk/atk.h")]
 		public static Atk.Role for_name (string name);
@@ -696,6 +748,7 @@
 		[CCode (cheader_filename = "atk/atk.h")]
 		public static unowned string get_name (Atk.Role role);
 		[CCode (cheader_filename = "atk/atk.h")]
+		[Deprecated]
 		public static Atk.Role register (string name);
 	}
 	[CCode (cheader_filename = "atk/atk.h", cprefix = "ATK_STATE_", type_id = "atk_state_type_get_type ()")]
@@ -814,6 +867,29 @@
 		LINE,
 		PARAGRAPH
 	}
+	[CCode (cheader_filename = "atk/atk.h", cprefix = "ATK_VALUE_", type_id = "atk_value_type_get_type ()")]
+	public enum ValueType {
+		VERY_WEAK,
+		WEAK,
+		ACCEPTABLE,
+		STRONG,
+		VERY_STRONG,
+		VERY_LOW,
+		LOW,
+		MEDIUM,
+		HIGH,
+		VERY_HIGH,
+		VERY_BAD,
+		BAD,
+		GOOD,
+		VERY_GOOD,
+		BEST,
+		LAST_DEFINED;
+		[CCode (cheader_filename = "atk/atk.h")]
+		public static unowned string get_localized_name (Atk.ValueType value_type);
+		[CCode (cheader_filename = "atk/atk.h")]
+		public static unowned string get_name (Atk.ValueType value_type);
+	}
 	[CCode (cheader_filename = "atk/atk.h", has_target = false)]
 	public delegate void EventListener (Atk.Object obj);
 	[CCode (cheader_filename = "atk/atk.h", has_target = false)]
@@ -826,6 +902,7 @@
 	[CCode (cheader_filename = "atk/atk.h", instance_pos = 1.9)]
 	public delegate int KeySnoopFunc (Atk.KeyEventStruct event);
 	[CCode (cheader_filename = "atk/atk.h", has_target = false)]
+	[Deprecated]
 	public delegate void PropertyChangeHandler (Atk.Object obj, Atk.PropertyValues vals);
 	[CCode (cheader_filename = "atk/atk.h", cname = "GSignalEmissionHook", has_target = false)]
 	public delegate bool SignalEmissionHook (GLib.SignalInvocationHint ihint, [CCode (array_length_pos = 1.9)] Atk.Value[] param_values, void* data);
--- a/vapi/clutter-1.0.vapi	2014-02-03 23:11:21.000000000 +0100
+++ b/vapi/clutter-1.0.vapi	2014-08-02 13:39:10.559150099 +0200
@@ -5989,12 +5989,18 @@
 		public void get_press_coords (uint point, out float press_x, out float press_y);
 		public void get_release_coords (uint point, out float release_x, out float release_y);
 		public unowned Clutter.EventSequence get_sequence (uint point);
+		public void get_threshold_trigger_distance (out float x, out float y);
 		public Clutter.GestureTriggerEdge get_threshold_trigger_egde ();
 		public float get_velocity (uint point, out float velocity_x, out float velocity_y);
 		public void set_n_touch_points (int nb_points);
+		public void set_threshold_trigger_distance (float x, float y);
 		public void set_threshold_trigger_edge (Clutter.GestureTriggerEdge edge);
 		public int n_touch_points { get; set; }
 		[NoAccessorMethod]
+		public float threshold_trigger_distance_x { get; construct; }
+		[NoAccessorMethod]
+		public float threshold_trigger_distance_y { get; construct; }
+		[NoAccessorMethod]
 		public Clutter.GestureTriggerEdge threshold_trigger_edge { get; construct; }
 		public virtual signal bool gesture_begin (Clutter.Actor actor);
 		public virtual signal void gesture_cancel (Clutter.Actor actor);
--- a/vapi/geocode-glib-1.0.vapi	2013-09-13 08:43:42.000000000 +0200
+++ b/vapi/geocode-glib-1.0.vapi	2014-08-02 13:39:10.559150099 +0200
@@ -16,6 +16,19 @@
 		[CCode (cheader_filename = "geocode-glib/geocode-glib.h", cname = "GEOCODE_LOCATION_ACCURACY_UNKNOWN")]
 		public const int UNKNOWN;
 	}
+	[CCode (cheader_filename = "geocode-glib/geocode-glib.h", type_id = "geocode_bounding_box_get_type ()")]
+	public class BoundingBox : GLib.Object {
+		[CCode (has_construct_function = false)]
+		public BoundingBox (double top, double bottom, double left, double right);
+		public double get_bottom ();
+		public double get_left ();
+		public double get_right ();
+		public double get_top ();
+		public double bottom { get; construct; }
+		public double left { get; construct; }
+		public double right { get; construct; }
+		public double top { get; construct; }
+	}
 	[CCode (cheader_filename = "geocode-glib/geocode-glib.h", type_id = "geocode_forward_get_type ()")]
 	public class Forward : GLib.Object {
 		[CCode (has_construct_function = false)]
@@ -24,27 +37,45 @@
 		public Forward.for_params (GLib.HashTable<string,GLib.Value?> @params);
 		[CCode (has_construct_function = false)]
 		public Forward.for_string (string str);
+		public uint get_answer_count ();
+		public bool get_bounded ();
 		public GLib.List<weak Geocode.Place> search () throws GLib.Error;
 		public async GLib.List<weak Geocode.Place> search_async (GLib.Cancellable? cancellable = null) throws GLib.Error;
 		public void set_answer_count (uint count);
+		public void set_bounded (bool bounded);
+		public void set_search_area (Geocode.BoundingBox box);
+		public uint answer_count { get; set; }
+		public bool bounded { get; set; }
+		[NoAccessorMethod]
+		public Geocode.BoundingBox search_area { owned get; set; }
 	}
 	[CCode (cheader_filename = "geocode-glib/geocode-glib.h", type_id = "geocode_location_get_type ()")]
 	public class Location : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public Location (double latitude, double longitude, double accuracy = LocationAccuracy.UNKNOWN);
 		public double get_accuracy ();
+		public double get_altitude ();
+		public Geocode.LocationCRS get_crs ();
 		public unowned string get_description ();
 		public double get_distance_from (Geocode.Location locb);
 		public double get_latitude ();
 		public double get_longitude ();
 		public uint64 get_timestamp ();
 		public void set_description (string description);
+		public bool set_from_uri (string uri) throws GLib.Error;
+		public string to_uri (Geocode.LocationURIScheme scheme);
 		[CCode (has_construct_function = false)]
 		public Location.with_description (double latitude, double longitude, double accuracy, string description);
-		public double accuracy { get; construct; }
+		[NoAccessorMethod]
+		public double accuracy { get; set; }
+		[NoAccessorMethod]
+		public double altitude { get; set; }
+		public Geocode.LocationCRS crs { get; construct; }
 		public string description { get; set; }
-		public double latitude { get; construct; }
-		public double longitude { get; construct; }
+		[NoAccessorMethod]
+		public double latitude { get; set; }
+		[NoAccessorMethod]
+		public double longitude { get; set; }
 		public uint64 timestamp { get; }
 	}
 	[CCode (cheader_filename = "geocode-glib/geocode-glib.h", type_id = "geocode_place_get_type ()")]
@@ -53,6 +84,7 @@
 		public Place (string name, Geocode.PlaceType place_type);
 		public unowned string get_administrative_area ();
 		public unowned string get_area ();
+		public unowned Geocode.BoundingBox get_bounding_box ();
 		public unowned string get_building ();
 		public unowned string get_continent ();
 		public unowned string get_country ();
@@ -61,6 +93,7 @@
 		public unowned GLib.Icon get_icon ();
 		public unowned Geocode.Location get_location ();
 		public unowned string get_name ();
+		public unowned string get_osm_id ();
 		public Geocode.PlaceType get_place_type ();
 		public unowned string get_postal_code ();
 		public unowned string get_state ();
@@ -69,6 +102,7 @@
 		public unowned string get_town ();
 		public void set_administrative_area (string admin_area);
 		public void set_area (string area);
+		public void set_bounding_box (Geocode.BoundingBox bbox);
 		public void set_building (string building);
 		public void set_continent (string continent);
 		public void set_country (string country);
@@ -85,15 +119,17 @@
 		public Place.with_location (string name, Geocode.PlaceType place_type, Geocode.Location location);
 		public string administrative_area { get; set; }
 		public string area { get; set; }
+		public Geocode.BoundingBox bounding_box { get; set; }
 		public string building { get; set; }
 		public string continent { get; set; }
 		public string country { get; set; }
 		public string country_code { get; set; }
 		public string county { get; set; }
-		[NoAccessorMethod]
-		public GLib.Icon icon { owned get; set; }
+		public GLib.Icon icon { get; }
 		public Geocode.Location location { get; set; }
 		public string name { get; set; }
+		[NoAccessorMethod]
+		public string osm_id { owned get; set; }
 		public Geocode.PlaceType place_type { get; construct; }
 		public string postal_code { get; set; }
 		public string state { get; set; }
@@ -110,6 +146,14 @@
 		public Geocode.Place resolve () throws GLib.Error;
 		public async Geocode.Place resolve_async (GLib.Cancellable? cancellable = null) throws GLib.Error;
 	}
+	[CCode (cheader_filename = "geocode-glib/geocode-glib.h", cprefix = "GEOCODE_LOCATION_CRS_", type_id = "geocode_location_crs_get_type ()")]
+	public enum LocationCRS {
+		WGS84
+	}
+	[CCode (cheader_filename = "geocode-glib/geocode-glib.h", cprefix = "GEOCODE_LOCATION_URI_SCHEME_", type_id = "geocode_location_uri_scheme_get_type ()")]
+	public enum LocationURIScheme {
+		GEO
+	}
 	[CCode (cheader_filename = "geocode-glib/geocode-glib.h", cprefix = "GEOCODE_PLACE_TYPE_", type_id = "geocode_place_type_get_type ()")]
 	public enum PlaceType {
 		UNKNOWN,
--- a/vapi/gtk+-3.0.vapi	2014-03-22 14:22:43.000000000 +0100
+++ b/vapi/gtk+-3.0.vapi	2014-08-02 13:40:05.236194877 +0200
@@ -3602,6 +3602,11 @@
 		public virtual signal void closed ();
 	}
 	[CCode (cheader_filename = "gtk/gtk.h")]
+	public class PopoverAccessible : Gtk.ContainerAccessible, Atk.Component {
+		[CCode (has_construct_function = false)]
+		protected PopoverAccessible ();
+	}
+	[CCode (cheader_filename = "gtk/gtk.h")]
 	public class PrintContext : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected PrintContext ();
@@ -6897,6 +6902,7 @@
 		public abstract int get_child_index (Gtk.CellAccessible cell);
 		public abstract Gtk.CellRendererState get_renderer_state (Gtk.CellAccessible cell);
 		public abstract bool grab_focus (Gtk.CellAccessible cell);
+		public abstract void update_relationset (Gtk.CellAccessible cell, Atk.RelationSet relationset);
 	}
 	[CCode (cheader_filename = "gtk/gtk.h")]
 	public interface CellEditable : Gtk.Widget {
