Submitted By: Ken Moffat <ken at linuxfromscratch dot org>
Date: 2021-10-09
Initial Package Version: 5.15.6
Upstream Status: Uncertain, https://bugreports.qt.io/browse/QTBUG-96911
Origin: Arch:
Description: Fixes FTBFS with harfbuzz-3 - rediffed to apply to toplevel
 chromium-harfbuzz-3.0.0.patch from
 https://github.com/chromium/chromium/commit/b289f6f3fcbc
 (the first non-png change, the other change to BUILD.gn is not wanted)
 and
 skia-harfbuzz-3.0.0.patch which is described as
 Minimal diff for harfbuzz 3.0.0 support; based on:
 https://github.com/google/skia/commit/66684b17b382
 https://github.com/google/skia/commit/51d83abcd24a

diff -Naur a/src/3rdparty/chromium/components/paint_preview/common/subset_font.cc b/src/3rdparty/chromium/components/paint_preview/common/subset_font.cc
--- a/src/3rdparty/chromium/components/paint_preview/common/subset_font.cc	2021-08-24 12:54:05.000000000 +0100
+++ b/src/3rdparty/chromium/components/paint_preview/common/subset_font.cc	2021-10-09 19:23:18.987856744 +0100
@@ -71,9 +71,11 @@
   hb_set_t* glyphs =
       hb_subset_input_glyph_set(input.get());  // Owned by |input|.
   usage.ForEach(base::BindRepeating(&AddGlyphs, base::Unretained(glyphs)));
-  hb_subset_input_set_retain_gids(input.get(), true);
+  hb_subset_input_set_flags(input.get(), HB_SUBSET_FLAGS_RETAIN_GIDS);
 
-  HbScoped<hb_face_t> subset_face(hb_subset(face.get(), input.get()));
+  HbScoped<hb_face_t> subset_face(hb_subset_or_fail(face.get(), input.get()));
+  if (!subset_face)
+    return nullptr;
   HbScoped<hb_blob_t> subset_blob(hb_face_reference_blob(subset_face.get()));
   if (!subset_blob)
     return nullptr;
diff -Naur a/src/3rdparty/chromium/third_party/skia/gn/skia.gni b/src/3rdparty/chromium/third_party/skia/gn/skia.gni
--- a/src/3rdparty/chromium/third_party/skia/gn/skia.gni	2021-08-24 12:54:05.000000000 +0100
+++ b/src/3rdparty/chromium/third_party/skia/gn/skia.gni	2021-10-09 19:26:50.060071263 +0100
@@ -32,8 +32,6 @@
   skia_include_multiframe_procs = false
   skia_lex = false
   skia_libgifcodec_path = "third_party/externals/libgifcodec"
-  skia_pdf_subset_harfbuzz =
-      false  # TODO: set skia_pdf_subset_harfbuzz to skia_use_harfbuzz.
   skia_qt_path = getenv("QT_PATH")
   skia_skqp_global_error_tolerance = 0
   skia_tools_require_resources = false
@@ -99,6 +97,10 @@
 }
 
 declare_args() {
+  skia_pdf_subset_harfbuzz = skia_use_harfbuzz
+}
+
+declare_args() {
   skia_compile_sksl_tests = skia_compile_processors
   skia_enable_fontmgr_android = skia_use_expat && skia_use_freetype
   skia_enable_fontmgr_custom_directory = skia_use_freetype && !is_fuchsia
diff -Naur a/src/3rdparty/chromium/third_party/skia/src/pdf/SkPDFSubsetFont.cpp b/src/3rdparty/chromium/third_party/skia/src/pdf/SkPDFSubsetFont.cpp
--- a/src/3rdparty/chromium/third_party/skia/src/pdf/SkPDFSubsetFont.cpp	2021-08-24 12:54:05.000000000 +0100
+++ b/src/3rdparty/chromium/third_party/skia/src/pdf/SkPDFSubsetFont.cpp	2021-10-09 19:26:50.060071263 +0100
@@ -49,6 +49,37 @@
                                 blob.release());
 }
 
+template<typename...> using void_t = void;
+template<typename T, typename = void>
+struct SkPDFHarfBuzzSubset {
+    // This is the HarfBuzz 3.0 interface.
+    // hb_subset_flags_t does not exist in 2.0. It isn't dependent on T, so inline the value of
+    // HB_SUBSET_FLAGS_RETAIN_GIDS until 2.0 is no longer supported.
+    static HBFace Make(T input, hb_face_t* face) {
+        // TODO: When possible, check if a font is 'tricky' with FT_IS_TRICKY.
+        // If it isn't known if a font is 'tricky', retain the hints.
+        hb_subset_input_set_flags(input, 2/*HB_SUBSET_FLAGS_RETAIN_GIDS*/);
+        return HBFace(hb_subset_or_fail(face, input));
+    }
+};
+template<typename T>
+struct SkPDFHarfBuzzSubset<T, void_t<
+    decltype(hb_subset_input_set_retain_gids(std::declval<T>(), std::declval<bool>())),
+    decltype(hb_subset_input_set_drop_hints(std::declval<T>(), std::declval<bool>())),
+    decltype(hb_subset(std::declval<hb_face_t*>(), std::declval<T>()))
+    >>
+{
+    // This is the HarfBuzz 2.0 (non-public) interface, used if it exists.
+    // This code should be removed as soon as all users are migrated to the newer API.
+    static HBFace Make(T input, hb_face_t* face) {
+        hb_subset_input_set_retain_gids(input, true);
+        // TODO: When possible, check if a font is 'tricky' with FT_IS_TRICKY.
+        // If it isn't known if a font is 'tricky', retain the hints.
+        hb_subset_input_set_drop_hints(input, false);
+        return HBFace(hb_subset(face, input));
+    }
+};
+
 static sk_sp<SkData> subset_harfbuzz(sk_sp<SkData> fontData,
                                      const SkPDFGlyphUse& glyphUsage,
                                      int ttcIndex) {
@@ -71,11 +102,10 @@
     hb_set_t* glyphs = hb_subset_input_glyph_set(input.get());
     glyphUsage.getSetValues([&glyphs](unsigned gid) { hb_set_add(glyphs, gid);});
 
-    hb_subset_input_set_retain_gids(input.get(), true);
-    // TODO: When possible, check if a font is 'tricky' with FT_IS_TRICKY.
-    // If it isn't known if a font is 'tricky', retain the hints.
-    hb_subset_input_set_drop_hints(input.get(), false);
-    HBFace subset(hb_subset(face.get(), input.get()));
+    HBFace subset = SkPDFHarfBuzzSubset<hb_subset_input_t*>::Make(input.get(), face.get());
+    if (!subset) {
+        return nullptr;
+    }
     HBBlob result(hb_face_reference_blob(subset.get()));
     return to_data(std::move(result));
 }
diff -Naur a/src/3rdparty/chromium/third_party/skia/third_party/harfbuzz/BUILD.gn b/src/3rdparty/chromium/third_party/skia/third_party/harfbuzz/BUILD.gn
--- a/src/3rdparty/chromium/third_party/skia/third_party/harfbuzz/BUILD.gn	2021-08-24 12:54:05.000000000 +0100
+++ b/src/3rdparty/chromium/third_party/skia/third_party/harfbuzz/BUILD.gn	2021-10-09 19:26:50.060071263 +0100
@@ -14,6 +14,9 @@
   system("harfbuzz") {
     include_dirs = [ "/usr/include/harfbuzz" ]
     libs = [ "harfbuzz" ]
+    if (skia_pdf_subset_harfbuzz) {
+      libs += [ "harfbuzz-subset" ]
+    }
   }
 } else {
   third_party("harfbuzz") {
